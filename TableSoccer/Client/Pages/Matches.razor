@page "/"
@page "/matches"
@using System.Text;
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<h1>Matches</h1>

<h2>New Match</h2>
<EditForm Model="@CurrentMatch" OnValidSubmit="AddMatchAsync">
	<ObjectGraphDataAnnotationsValidator />
	<ValidationSummary />

	<button type="button" @onclick="ShuffleTeams">🎲</button>

	@foreach (var team in CurrentMatch.Teams)
	{
		if (UserLookup == null)
		{
			<p><em>Loading users...</em></p>
			continue;
		}

		<div class="form-group">
			<label>Team @team.Name:</label>
			@foreach (var (index, member) in team.TeamMembers.Enumerate())
			{
				<label class="form-group">
					User @(index + 1)

					@if (team.TeamMembers.Count > MinTeamMemberCount)
					{
						<button type="button" @onclick="@(() => RemoveTeamMember(team, member))">x</button>
					}

					<InputSelectNumber class="form-control" @bind-Value="member.UserId">
						@foreach (var user in UserLookup)
						{
							<option value="@user.Key">@user.Value</option>
						}
					</InputSelectNumber>
				</label>
			}

			@if (team.TeamMembers.Count < MaxTeamMemberCount)
			{
				<button type="button" @onclick="(() => AddEmptyTeamMember(team))">+</button>
			}
		</div>
	}

	<div class="form-group">
		@foreach (var team in CurrentMatch.Teams)
		{
			<label>
				Team @team.Name
				<InputNumber class="form-control" @bind-Value="@team.Result" />
			</label>
		}
	</div>

	<button class="btn btn-primary" type="submit">Add</button>
</EditForm>

<h2>All Matches</h2>
@if (AllMatches == null)
{
	<p><em>Loading matches...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Team A</th>
				<th>Team B</th>
				<th>Result</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var match in AllMatches)
			{
				var teamA = match.Teams.ElementAt(0);
				var teamB = match.Teams.ElementAt(1);

				<tr>
					<td>@(string.Join(", ", teamA.TeamMembers.Select(member => member.User.Name)))</td>
					<td>@(string.Join(", ", teamB.TeamMembers.Select(member => member.User.Name)))</td>
					<td>@teamA.Result - @teamB.Result</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private const int MinTeamMemberCount = 1;
	private const int MaxTeamMemberCount = 4;
	private const int MaxPoints = 10;

	private List<Match> AllMatches { get; set; }
	private List<KeyValuePair<long, string>> UserLookup { get; set; }
	private Match CurrentMatch { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ResetMatch();
		await Task.WhenAll(
			LoadMatchesAsync(),
			LoadUserLookupAsync()
		);
	}

	void ResetMatch()
	{
		var teamA = new Team() { Position = 0, TeamMembers = new List<TeamMember>() { } };
		var teamB = new Team() { Position = 1, TeamMembers = new List<TeamMember>() { } };

		AddEmptyTeamMember(teamA);
		AddEmptyTeamMember(teamB);

		CurrentMatch = new Match() { Teams = new[] { teamA, teamB } };
	}

	async Task LoadMatchesAsync()
	{
		AllMatches = await Http.GetJsonAsync<List<Match>>("Match");
	}

	async Task LoadUserLookupAsync()
	{
		UserLookup = await Http.GetJsonAsync<List<KeyValuePair<long, string>>>("User/Lookup");
	}

	async Task AddMatchAsync()
	{
		var warnings = new Lazy<StringBuilder>(() =>
		{
			var sb = new StringBuilder();
			sb.AppendLine("Warning!");
			sb.AppendLine();
			return sb;
		});

		switch (CurrentMatch.Teams.Count(team => team.Result >= MaxPoints))
		{
			case 0:
				warnings.Value.AppendLine($"No team reached {MaxPoints}.");
				break;

			case 1:
				break;

			case var count:
				warnings.Value.AppendLine($"{count} teams reached {MaxPoints} points.");
				break;
		}

		if (CurrentMatch.Teams.All(team => team.Result == 0))
		{
			warnings.Value.AppendLine("No team scored any points.");
		}

		foreach (var team in CurrentMatch.Teams)
		{
			if (team.Result <= MaxPoints)
			{
				continue;
			}

			warnings.Value.AppendLine($"Team {team.Name} scored more than {MaxPoints} points.");
		}

		if (warnings.IsValueCreated)
		{
			warnings.Value.AppendLine();
			warnings.Value.AppendLine("Add match regardless?");

			var promptResult = await JsRuntime.InvokeAsync<bool>("confirm", warnings.Value.ToString());
			if (!promptResult)
			{
				return;
			}
		}

		await Http.PostJsonAsync("Match", CurrentMatch);
		await LoadMatchesAsync();
		ResetMatch();
	}

	void AddEmptyTeamMember(Team team)
	{
		team.TeamMembers.Add(new TeamMember());
	}

	void RemoveTeamMember(Team team, TeamMember member)
	{
		team.TeamMembers.Remove(member);
	}

	void ShuffleTeams()
	{
		var members = (from team in CurrentMatch.Teams
					   from member in team.TeamMembers
					   where member.UserId != 0
					   select member).ToList();

		foreach (var team in CurrentMatch.Teams)
		{
			team.TeamMembers.Clear();
		}

		var random = new Random();
		members.Shuffle(random);

		var teamInsertionOrder = CurrentMatch.Teams.ToList();
		teamInsertionOrder.Shuffle(random);

		var memberIterator = members.GetEnumerator();
		while (true)
		{
			foreach (var team in teamInsertionOrder)
			{
				if (!memberIterator.MoveNext())
				{
					return;
				}

				team.TeamMembers.Add(memberIterator.Current);
			}
		}
	}
}